package com.MGHWayFinder;

import java.util.ArrayList;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;


public class Dijkstra {
    
	private  final int INFINITY = Integer.MAX_VALUE;
	
	 ArrayList<node> S = new ArrayList<node>();									//list of settled nodes		(shortest distance found)
	 ArrayList<node> Q = new ArrayList<node>();									//list of unsettled nodes	(distances not yet found)
	 ArrayList<node> PATH = new ArrayList<node>();								//Final Path
	 
	 node STARTNODE, ENDNODE;
	
	 
	public Dijkstra(node START, node END){
		this.STARTNODE = START;
		this.ENDNODE = END;
		
		dijkstraAlgorithm(START, END);
		PATH = buildPath(START, END);
	}
	 
    public ArrayList<node> buildPath(node START, node END){
    	ArrayList<node> P = new ArrayList<node>();						//FINAL PATH
    	P.add(END);														//initialize end node
		while(P.get(0) != START){										//loop backwards from end node until beginning node
			P.add(0, P.get(0).getPreviousNode());						//reverse stacking of nodes
		}		
		return P;
    }
			


	public void dijkstraAlgorithm(node start, node goal){
		
		node u;															//node place holder in the loop
		
		Q.add(start);													//starts by adding the starting point to the Q of unsettled nodes 	(EMPTY BEFORE ADD)
		start.setBestDistance(0);										//initializes starting distance of the start node to 0				(BEST DISTANCE FROM STARTING POINT = 0)
		
		while(!Q.isEmpty()){											//loops so long as there are elements in Q 							(ELEMENTS ARE REMOVED FROM Q IN getMinimumNode() AND ADDED in relaxNeighbors())
			u = getMinimumNode();										//set u to the min node distance in ArrayList Q
			S.add(u);													//add u to the ArrayList S											(NODES WITH MINIMUM DISTANCES FOUND)
			relaxNeighbors(u);											//tests neighbor nodes, see function below							
		}
	}
	
	public void relaxNeighbors(node v){
		node o = null;
		int dist;
		for(int i = 0; i < v.getNeighbors().size(); i++){						//loop through neighbors of node v
			o = v.getNeighbors().get(i);
			if(!S.contains(o)) { 												//only look at neighbors NOT in S
				dist = cDistance(v, o);											//calculate distance between v and o
				if(o.getBestDistance() > (v.getBestDistance() + dist)){			//shorter distance found
					o.setBestDistance(dist + v.getBestDistance());				//set best distance of node o
					o.setPNode(v);												//set best previous node to v
					Q.add(o);													//add node o to Q
				}
			}
		}
	}
	
	public int cDistance(node a, node b){								//calculates distances on the fly, could be stored to reduce calculations		(I SUGGEST KEEPING THIS FOR OTHER REASONS)
		double x = a.getX()-b.getX();
		double y = a.getY()-b.getY();
		return (int)Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
	}
	
	public node getMinimumNode(){										//returns the node from the arrayList Q with the smallest distance from the starting point
		node out = null;
		int min = INFINITY;
		for(int i = 0; i < Q.size(); i++){
			if(Q.get(i).getBestDistance() < min){
				min = Q.get(i).getBestDistance();
				out = Q.get(i);
			}
		}
		Q.remove(out);															//removes the minimum node from Q
		return out;
	}
	
}
